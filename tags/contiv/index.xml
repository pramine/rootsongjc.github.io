<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song - Cloud Native | Open Source | Community – contiv</title>
    <link>https://jimmysong.io/tags/contiv/</link>
    <description>Recent content in contiv on Jimmy Song - Cloud Native | Open Source | Community</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright &amp;copy; 2020 Jimmy Song 保留所有权利；基于 Hugo [educenter](https://github.com/themefisher/educenter-hugo)  主题构建</copyright>
    <lastBuildDate>Fri, 17 Mar 2017 17:52:37 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/contiv/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docker17.03CE下思科docker网络插件contiv趟坑终极版</title>
      <link>https://jimmysong.io/blog/contiv-ultimate/</link>
      <pubDate>Fri, 17 Mar 2017 17:52:37 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/contiv-ultimate/</guid>
      <description>
        
        
        

&lt;p&gt;前几天写的几篇&lt;a href=&#34;https://jimmysong.io/tags/contiv/&#34;&gt;关于Contiv的文章&lt;/a&gt;已经把引入坑了😂&lt;/p&gt;

&lt;p&gt;今天这篇文章将带领大家用正确的姿势编译和打包一个&lt;strong&gt;contiv netplugin&lt;/strong&gt;。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;请一定要在&lt;strong&gt;Linux&lt;/strong&gt;环境中编译。docker中编译也会报错，最好还是搞个虚拟🐔吧，最好还有VPN能翻墙。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;环境准备&#34;&gt;环境准备&lt;/h2&gt;

&lt;p&gt;我使用的是docker17.03-CE、安装了open vSwitch(这个包redhat的源里没有，需要自己的编译安装)，如果你懒得编译可以用我编译的rpm包，&lt;a href=&#34;https://res.cloudinary.com/jimmysong/image/upload/images/openvswitch-2.5.0-2.el7.x86_64.rpm&#34;&gt;点这里下载&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;编译&#34;&gt;编译&lt;/h2&gt;

&lt;p&gt;这一步是很容易失败的，有人提过&lt;a href=&#34;https://github.com/contiv/netplugin/issues/779&#34;&gt;issue-779&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;具体步骤&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;创建一个link &lt;strong&gt;/go&lt;/strong&gt;链接到你的GOPATH目录，下面编译的时候要用。&lt;/li&gt;
&lt;li&gt;将源码的&lt;strong&gt;vender&lt;/strong&gt;目录下的文件拷贝到$GOPATH/src目录。&lt;/li&gt;
&lt;li&gt;执行编译&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在netplugin目录下执行以下命令能够编译出二进制文件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NET_CONTAINER_BUILD=1 make build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在你的&lt;strong&gt;/$GOPATH/bin&lt;/strong&gt;目录下应该会有如下几个文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;contivk8s  github-release  godep  golint  misspell  modelgen  netcontiv  netctl  netmaster  netplugin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;⚠️编译过程中可能会遇到 有些包不存在或者需要翻墙下载。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;打包&#34;&gt;打包&lt;/h2&gt;

&lt;p&gt;我们将其打包为docker plugin。&lt;/p&gt;

&lt;p&gt;Makefile里用于创建plugin rootfs的命令是：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;host-pluginfs-create:
        @echo dev: creating a docker v2plugin rootfs ...
        sh scripts/v2plugin_rootfs.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;v2plugin_rootfs.sh&lt;/strong&gt;这个脚本的内容：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;#!/bin/bash
# Script to create the docker v2 plugin
# run this script from contiv/netplugin directory

echo &amp;quot;Creating rootfs for v2plugin &amp;quot;, ${CONTIV_V2PLUGIN_NAME}
cat install/v2plugin/config.template | grep -v &amp;quot;##&amp;quot; &amp;gt; install/v2plugin/config.json
sed -i &amp;quot;s%PluginName%${CONTIV_V2PLUGIN_NAME}%&amp;quot; install/v2plugin/config.json
cp bin/netplugin bin/netmaster bin/netctl install/v2plugin
docker build -t contivrootfs install/v2plugin
id=$(docker create contivrootfs true)
mkdir -p install/v2plugin/rootfs
sudo docker export &amp;quot;${id}&amp;quot; | sudo tar -x -C install/v2plugin/rootfs
docker rm -vf &amp;quot;${id}&amp;quot;
docker rmi contivrootfs
rm install/v2plugin/netplugin install/v2plugin/netmaster install/v2plugin/netctl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先把&lt;code&gt;$GOPATH/bin&lt;/code&gt;下生成的&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;netplugin&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;netmaster&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;netctl&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;netplugin&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这几个二进制文件拷贝到netplugin源码的bin目录下。&lt;/p&gt;

&lt;p&gt;这里面用语创建contivrootfs镜像的Dockerfile内容：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;# Docker v2plugin container with OVS / netplugin / netmaster 

FROM alpine:3.5
MAINTAINER Cisco Contiv (http://contiv.github.io/)

RUN mkdir -p /run/docker/plugins /etc/openvswitch /var/run/contiv/log \
    &amp;amp;&amp;amp; echo &#39;http://dl-cdn.alpinelinux.org/alpine/v3.4/main&#39; &amp;gt;&amp;gt; /etc/apk/repositories \
    &amp;amp;&amp;amp; apk update &amp;amp;&amp;amp; apk add openvswitch=2.5.0-r0 iptables

COPY netplugin netmaster netctl startcontiv.sh /

ENTRYPOINT [&amp;quot;/startcontiv.sh&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行&lt;code&gt;make host-pluginfs-create&lt;/code&gt;创建rootfs。&lt;/p&gt;

&lt;p&gt;创建出了rootfs后，然后执行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker plugin create localhost:5000/contiv/netplugin .
docker push localhost:5000/contiv/netplugin
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;注：我们将插件push到docker registry的镜像仓库中，当前&lt;a href=&#34;www.github.com/vmware/harbor&#34;&gt;Harbor&lt;/a&gt;还不支持docker插件的push。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Install plugin&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下面是编译和安装我自己生成v2plugin的过程。&lt;/p&gt;

&lt;p&gt;修改&lt;strong&gt;config.json&lt;/strong&gt;文件中的&lt;code&gt;plugin_name&lt;/code&gt;字段的值为插件的名称。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$docker plugin install localhost:5000/contiv/v2plugin 
Plugin &amp;quot;localhost:5000/contiv/v2plugin&amp;quot; is requesting the following privileges:
 - network: [host]
 - mount: [/etc/openvswitch]
 - mount: [/var/log/openvswitch]
 - mount: [/var/run]
 - mount: [/lib/modules]
 - capabilities: [CAP_SYS_ADMIN CAP_NET_ADMIN CAP_SYS_MODULE]
Do you grant the above permissions? [y/N] y
latest: Pulling from contiv/v2plugin
fd87a71d9090: Download complete 
Digest: sha256:b13ad7930f771c9602acf562c2ae147482466f4d94e708692a215935663215a6
Status: Downloaded newer image for localhost:5000/contiv/v2plugin:latest
Installed plugin localhost:5000/contiv/v2plugin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自己create的插件enable的时候从docker daemon的日志中依然可以看到之前看到找不到socket的错误，实际上也确实是没有生成。如果直接使用&lt;code&gt;docker plugin install store/contiv/v2plugin:1.0.0-beta.3&lt;/code&gt;的方式安装插件是没有问题的。&lt;/p&gt;

&lt;h2 id=&#34;docker17-03-ce中插件机制存在的问题&#34;&gt;Docker17.03-CE中插件机制存在的问题&lt;/h2&gt;

&lt;p&gt;Docker17.03的插件机制是为了docker公司的商业化策略而实行的，所有的docker插件都运行在自己的namespace和rootfs中，插件接口&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Plugin backend接口&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;// Backend for Plugin
type Backend interface {
	Disable(name string, config *enginetypes.PluginDisableConfig) error
	Enable(name string, config *enginetypes.PluginEnableConfig) error
	List(filters.Args) ([]enginetypes.Plugin, error)
	Inspect(name string) (*enginetypes.Plugin, error)
	Remove(name string, config *enginetypes.PluginRmConfig) error
	Set(name string, args []string) error
	Privileges(ctx context.Context, ref reference.Named, metaHeaders http.Header, authConfig *enginetypes.AuthConfig) (enginetypes.PluginPrivileges, error)
	Pull(ctx context.Context, ref reference.Named, name string, metaHeaders http.Header, authConfig *enginetypes.AuthConfig, privileges enginetypes.PluginPrivileges, outStream io.Writer) error
	Push(ctx context.Context, name string, metaHeaders http.Header, authConfig *enginetypes.AuthConfig, outStream io.Writer) error
	Upgrade(ctx context.Context, ref reference.Named, name string, metaHeaders http.Header, authConfig *enginetypes.AuthConfig, privileges enginetypes.PluginPrivileges, outStream io.Writer) error
	CreateFromContext(ctx context.Context, tarCtx io.ReadCloser, options *enginetypes.PluginCreateOptions) error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从Plugin的后端接口中可以看到，没有像镜像一样的两个常用方法：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;没有修改plugin名字的方法，因为没有这个方法，就无法push plugin到自己的镜像仓库，另外&lt;strong&gt;Harbor&lt;/strong&gt;还是不支持&lt;code&gt;docker plugin push&lt;/code&gt; &lt;a href=&#34;https://github.com/vmware/harbor/issues/1532&#34;&gt;Issue-1532&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;没有导出plugin的方法，这样就只能在联网的主机上安装docker plugin了，对于无法联网的主机只好束手无策了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;估计docker官方也不会开放这两个接口吧。毕竟这是&lt;strong&gt;Docker EE&lt;/strong&gt; 的一个重要卖点：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Docker EE&amp;rsquo;s Certified Plugins&lt;/strong&gt; provide networking and volume plugins and easy to download and install containers to the Docker EE environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;疑问&#34;&gt;疑问&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;为什么一定要使用docker plugin install&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因为&lt;code&gt;docker plugin install&lt;/code&gt;的时候会申请一些访问权限。&lt;/p&gt;

&lt;p&gt;这一块在上面的步骤中可以看到。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;为什么docker plugin不能改名字？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们看下Plugin的结构体（在api/types/plugin.go中定义）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Plugin A plugin for the Engine API
// swagger:model Plugin
type Plugin struct {

	// config
	// Required: true
	Config PluginConfig `json:&amp;quot;Config&amp;quot;`

	// True when the plugin is running. False when the plugin is not running, only installed.
	// Required: true
	Enabled bool `json:&amp;quot;Enabled&amp;quot;`

	// Id
	ID string `json:&amp;quot;Id,omitempty&amp;quot;`

	// name
	// Required: true
	Name string `json:&amp;quot;Name&amp;quot;`

	// plugin remote reference used to push/pull the plugin
	PluginReference string `json:&amp;quot;PluginReference,omitempty&amp;quot;`

	// settings
	// Required: true
	Settings PluginSettings `json:&amp;quot;Settings&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意其中有一个&lt;code&gt;PluginReference&lt;/code&gt;结构体，它的方法有：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;type pluginReference struct {
	name     reference.Named
	pluginID digest.Digest
}

func (r *pluginReference) References(id digest.Digest) []reference.Named {
	if r.pluginID != id {
		return nil
	}
	return []reference.Named{r.name}
}

func (r *pluginReference) ReferencesByName(ref reference.Named) []refstore.Association {
	return []refstore.Association{
		{
			Ref: r.name,
			ID:  r.pluginID,
		},
	}
}

func (r *pluginReference) Get(ref reference.Named) (digest.Digest, error) {
	if r.name.String() != ref.String() {
		return digest.Digest(&amp;quot;&amp;quot;), refstore.ErrDoesNotExist
	}
	return r.pluginID, nil
}

func (r *pluginReference) AddTag(ref reference.Named, id digest.Digest, force bool) error {
	// Read only, ignore
	return nil
}
func (r *pluginReference) AddDigest(ref reference.Canonical, id digest.Digest, force bool) error {
	// Read only, ignore
	return nil
}
func (r *pluginReference) Delete(ref reference.Named) (bool, error) {
	// Read only, ignore
	return false, nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意其中有三个方法&lt;code&gt;AddTag&lt;/code&gt;、&lt;code&gt;AddDigest&lt;/code&gt;、&lt;code&gt;Delete&lt;/code&gt;方法都是只读的。在&lt;code&gt;migrate/v1/migratev1.go&lt;/code&gt;中有引用到了这个。&lt;/p&gt;

&lt;p&gt;再看下&lt;strong&gt;Reference&lt;/strong&gt;的的定义&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;vendor/github.com/docker/distribution/reference/reference.go
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;// Package reference provides a general type to represent any way of referencing images within the registry.
// Its main purpose is to abstract tags and digests (content-addressable hash).
//
// Grammar
//
// 	reference                       := name [ &amp;quot;:&amp;quot; tag ] [ &amp;quot;@&amp;quot; digest ]
//	name                            := [domain &#39;/&#39;] path-component [&#39;/&#39; path-component]*
//	domain                          := domain-component [&#39;.&#39; domain-component]* [&#39;:&#39; port-number]
//	domain-component                := /([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])/
//	port-number                     := /[0-9]+/
//	path-component                  := alpha-numeric [separator alpha-numeric]*
// 	alpha-numeric                   := /[a-z0-9]+/
//	separator                       := /[_.]|__|[-]*/
//
//	tag                             := /[\w][\w.-]{0,127}/
//
//	digest                          := digest-algorithm &amp;quot;:&amp;quot; digest-hex
//	digest-algorithm                := digest-algorithm-component [ digest-algorithm-separator digest-algorithm-component ]
//	digest-algorithm-separator      := /[+.-_]/
//	digest-algorithm-component      := /[A-Za-z][A-Za-z0-9]*/
//	digest-hex                      := /[0-9a-fA-F]{32,}/ ; At least 128 bit digest value
//
//	identifier                      := /[a-f0-9]{64}/
//	short-identifier                := /[a-f0-9]{6,64}/
// Reference is an opaque object reference identifier that may include
// modifiers such as a hostname, name, tag, and digest.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改plugin的名字的方法是不是还没实现？&lt;/p&gt;

&lt;h2 id=&#34;解决方法&#34;&gt;解决方法&lt;/h2&gt;

&lt;p&gt;在代码存在bug的情况下，可以先用下面的方法暂时创建plugin。&lt;/p&gt;

&lt;p&gt;虽然docker代码里没有提供&lt;strong&gt;rename plugin&lt;/strong&gt;的接口，但是使用&lt;strong&gt;docker install&lt;/strong&gt;命令安装的plugin会存储在&lt;code&gt;/var/lib/docker/plugins/${PLUGIN_ID}&lt;/code&gt;目录下。&lt;/p&gt;

&lt;p&gt;可以在这个目录下使用&lt;strong&gt;docker plugin create&lt;/strong&gt;命令创建你自己想要的名称的docker plugin。&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;docker plugin set&lt;/code&gt;命令修改plugin中的属性:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cluster_store&lt;/li&gt;
&lt;li&gt;plugin_role&lt;/li&gt;
&lt;li&gt;plugin_name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;插件调试&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;日志地址&lt;code&gt;/run/contiv/log/&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;从非master节点的netplugin启动日志&lt;code&gt;netplugin_bootup.log&lt;/code&gt;中可以看到：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;V2 Plugin logs
Loading OVS
Starting OVS
Starting Netplugin 
/netplugin -debug -plugin-mode docker -vlan-if  -cluster-store etcd://172.20.0.113:2379  
Not starting netmaster as plugin role is none
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Netplugin启动的时候是正确的解析了&lt;strong&gt;etcd&lt;/strong&gt;的配置了。&lt;/p&gt;

&lt;p&gt;但是我们再看一下&lt;code&gt;netplugin.log&lt;/code&gt;的日志后就会发现，启动还是失败了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;time=&amp;quot;Mar 21 03:20:37.537954358&amp;quot; level=debug msg=&amp;quot;Got link list(16): [0xc4203fe200 0xc4203fe300 0xc4203fe400 0xc4203fe500 0xc420420000 0xc420420090 0xc420420120 0xc4204201b0 0xc420420240 0xc4204202d0 0xc420420360 0xc4204203f0 0xc420420480 0xc420420510 0xc4203feb80 0xc4203fec80]&amp;quot;
time=&amp;quot;Mar 21 03:20:37.538576647&amp;quot; level=error msg=&amp;quot;Failed to connect to etcd. Err: client: etcd cluster is unavailable or misconfigured&amp;quot;
time=&amp;quot;Mar 21 03:20:37.538599827&amp;quot; level=error msg=&amp;quot;Error creating client etcd to url 127.0.0.1:2379. Err: client: etcd cluster is unavailable or misconfigured&amp;quot;
time=&amp;quot;Mar 21 03:20:37.538612813&amp;quot; level=fatal msg=&amp;quot;Error initializing cluster. Err: client: etcd cluster is unavailable or misconfigured&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;netplugin&lt;/code&gt;没有正确的解析etcd的地址。这到底是为什么呢？bootup的日志里不是写的解析到了吗？这个问题还得研究下源码，也许是一个bug。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Contiv入坑指南-v2plugin</title>
      <link>https://jimmysong.io/blog/contiv-v2plugin/</link>
      <pubDate>Fri, 10 Mar 2017 11:51:09 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/contiv-v2plugin/</guid>
      <description>
        
        
        

&lt;p&gt;继续趟昨天挖的坑。&lt;/p&gt;

&lt;p&gt;昨天的&lt;a href=&#34;https://github.com/contiv/netplugin/issues/776&#34;&gt;issue-776&lt;/a&gt;已经得到@gkvijay的回复，原来是因为没有安装contiv/v2plugin的缘故，所以create contiv network失败，我需要自己build一个&lt;strong&gt;docker plugin&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;查看下这个&lt;a href=&#34;https://github.com/contiv/netplugin/commit/8afd1b7718c8424a876760d18484124e0aad3557&#34;&gt;commit&lt;/a&gt;里面有build &lt;strong&gt;v2plugin&lt;/strong&gt;的脚本更改，所以直接调用以下命令就可以build自己的v2plugin。&lt;/p&gt;

&lt;p&gt;前提你需要先build出&lt;code&gt;netctl&lt;/code&gt;、&lt;code&gt;netmaster&lt;/code&gt;、&lt;code&gt;netplugin&lt;/code&gt;三个二进制文件并保存到&lt;strong&gt;bin&lt;/strong&gt;目录下，如果你没自己build直接下载&lt;strong&gt;release&lt;/strong&gt;里面的文件保存进去也行。&lt;/p&gt;

&lt;h3 id=&#34;编译v2plugin插件&#34;&gt;编译v2plugin插件&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;修改config.json插件配置文件&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Json&#34;&gt;{
    &amp;quot;manifestVersion&amp;quot;: &amp;quot;v0&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Contiv network plugin for Docker&amp;quot;,
    &amp;quot;documentation&amp;quot;: &amp;quot;https://contiv.github.io&amp;quot;,
    &amp;quot;entrypoint&amp;quot;: [&amp;quot;/startcontiv.sh&amp;quot;],
    &amp;quot;network&amp;quot;: {
           &amp;quot;type&amp;quot;: &amp;quot;host&amp;quot;
    },
    &amp;quot;env&amp;quot;: [
       {
          &amp;quot;Description&amp;quot;: &amp;quot;To enable debug mode, set to &#39;-debug&#39;&amp;quot;,
          &amp;quot;Name&amp;quot;: &amp;quot;dbg_flag&amp;quot;,
          &amp;quot;Settable&amp;quot;: [
             &amp;quot;value&amp;quot;
          ],
          &amp;quot;Value&amp;quot;: &amp;quot;-debug&amp;quot;
       },
       {
          &amp;quot;Description&amp;quot;: &amp;quot;VLAN uplink interface used by OVS&amp;quot;,
          &amp;quot;Name&amp;quot;: &amp;quot;iflist&amp;quot;,
          &amp;quot;Settable&amp;quot;: [
             &amp;quot;value&amp;quot;
          ],
          &amp;quot;Value&amp;quot;: &amp;quot;&amp;quot;
       },
       {
          &amp;quot;Description&amp;quot;: &amp;quot;Etcd or Consul cluster store url&amp;quot;,
          &amp;quot;Name&amp;quot;: &amp;quot;cluster_store&amp;quot;,
          &amp;quot;Settable&amp;quot;: [
             &amp;quot;value&amp;quot;
          ],
          &amp;quot;Value&amp;quot;: &amp;quot;etcd://172.20.0.113:2379&amp;quot;
       },
       {
          &amp;quot;Description&amp;quot;: &amp;quot;Local IP address to be used by netplugin for control communication&amp;quot;,
          &amp;quot;Name&amp;quot;: &amp;quot;ctrl_ip&amp;quot;,
          &amp;quot;Settable&amp;quot;: [
             &amp;quot;value&amp;quot;
          ],
          &amp;quot;Value&amp;quot;: &amp;quot;none&amp;quot;
       },
       {
          &amp;quot;Description&amp;quot;: &amp;quot;Local VTEP IP address to be used by netplugin&amp;quot;,
          &amp;quot;Name&amp;quot;: &amp;quot;vtep_ip&amp;quot;,
          &amp;quot;Settable&amp;quot;: [
             &amp;quot;value&amp;quot;
          ],
          &amp;quot;Value&amp;quot;: &amp;quot;none&amp;quot;
       },
       {
          &amp;quot;Description&amp;quot;: &amp;quot;In &#39;master&#39; role, plugin runs netmaster and netplugin&amp;quot;,
          &amp;quot;Name&amp;quot;: &amp;quot;plugin_role&amp;quot;,
          &amp;quot;Settable&amp;quot;: [
             &amp;quot;value&amp;quot;
          ],
          &amp;quot;Value&amp;quot;: &amp;quot;master&amp;quot;
       },
       {
          &amp;quot;Description&amp;quot;: &amp;quot;Netmaster url to listen http requests on&amp;quot;,
          &amp;quot;Name&amp;quot;: &amp;quot;listen_url&amp;quot;,
          &amp;quot;Settable&amp;quot;: [
             &amp;quot;value&amp;quot;
          ],
          &amp;quot;Value&amp;quot;: &amp;quot;172.20.0.113:9999&amp;quot;
       },
       {
          &amp;quot;Description&amp;quot;: &amp;quot;Network Driver name for requests to dockerd. Should be same as name:tag of the plugin&amp;quot;,
          &amp;quot;Name&amp;quot;: &amp;quot;plugin_name&amp;quot;,
          &amp;quot;Settable&amp;quot;: [
             &amp;quot;value&amp;quot;
          ],
          &amp;quot;Value&amp;quot;: &amp;quot;contiv/v2plugin:latest&amp;quot;
       }
    ],
    &amp;quot;mounts&amp;quot;: [
       {
          &amp;quot;type&amp;quot;: &amp;quot;bind&amp;quot;,
          &amp;quot;options&amp;quot;: [&amp;quot;rbind&amp;quot;],
          &amp;quot;source&amp;quot;: &amp;quot;/etc/openvswitch&amp;quot;,
          &amp;quot;destination&amp;quot;: &amp;quot;/etc/openvswitch&amp;quot;
       },
       {
          &amp;quot;type&amp;quot;: &amp;quot;bind&amp;quot;,
          &amp;quot;options&amp;quot;: [&amp;quot;rbind&amp;quot;],
          &amp;quot;source&amp;quot;: &amp;quot;/var/log/openvswitch&amp;quot;,
          &amp;quot;destination&amp;quot;: &amp;quot;/var/log/openvswitch&amp;quot;
       },
       {
          &amp;quot;type&amp;quot;: &amp;quot;bind&amp;quot;,
          &amp;quot;options&amp;quot;: [&amp;quot;rbind&amp;quot;],
          &amp;quot;source&amp;quot;: &amp;quot;/var/run&amp;quot;,
          &amp;quot;destination&amp;quot;: &amp;quot;/var/run&amp;quot;
       },
       {
          &amp;quot;type&amp;quot;: &amp;quot;bind&amp;quot;,
          &amp;quot;options&amp;quot;: [&amp;quot;rbind&amp;quot;],
          &amp;quot;source&amp;quot;: &amp;quot;/lib/modules&amp;quot;,
          &amp;quot;destination&amp;quot;: &amp;quot;/lib/modules&amp;quot;
       }
    ],
    &amp;quot;interface&amp;quot; : {
          &amp;quot;types&amp;quot;: [&amp;quot;docker.networkdriver/1.0&amp;quot;, &amp;quot;docker.ipamdriver/1.0&amp;quot;],
          &amp;quot;socket&amp;quot;: &amp;quot;netplugin.sock&amp;quot;
    },
    &amp;quot;Linux&amp;quot;: {
          &amp;quot;Capabilities&amp;quot;: [&amp;quot;CAP_SYS_ADMIN&amp;quot;, &amp;quot;CAP_NET_ADMIN&amp;quot;, &amp;quot;CAP_SYS_MODULE&amp;quot;]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/docker/docker/blob/master/docs/extend/config.md&#34;&gt;关于&lt;strong&gt;docker plugin v2&lt;/strong&gt;配置文件的说明&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;方法一&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;自动化make&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$make host-pluginfs-create
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;方法二&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;直接调用Makefile里指定的那个shell脚本&lt;code&gt;scripts/v2plugin_rootfs.sh&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;$bash scripts/v2plugin_rootfs
Creating rootfs for v2plugin ,
sed: 1: &amp;quot;install/v2plugin/config ...&amp;quot;: command i expects \ followed by text
Sending build context to Docker daemon 73.94 MB
Step 1/5 : FROM alpine:3.5
 ---&amp;gt; 4a415e366388
Step 2/5 : MAINTAINER Cisco Contiv (http://contiv.github.io/)
 ---&amp;gt; Running in fada1677341b
 ---&amp;gt; f0440792dff6
Removing intermediate container fada1677341b
Step 3/5 : RUN mkdir -p /run/docker/plugins /etc/openvswitch /var/run/contiv/log     &amp;amp;&amp;amp; echo &#39;http://dl-cdn.alpinelinux.org/alpine/v3.4/main&#39; &amp;gt;&amp;gt; /etc/apk/repositories     &amp;amp;&amp;amp; apk update &amp;amp;&amp;amp; apk add openvswitch=2.5.0-r0 iptables
 ---&amp;gt; Running in 2ae2fbee6834
fetch http://dl-cdn.alpinelinux.org/alpine/v3.5/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.5/community/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/APKINDEX.tar.gz
v3.5.2-3-g3649125268 [http://dl-cdn.alpinelinux.org/alpine/v3.5/main]
v3.5.1-71-gc7bb9a04f0 [http://dl-cdn.alpinelinux.org/alpine/v3.5/community]
v3.4.6-81-g1f1f409 [http://dl-cdn.alpinelinux.org/alpine/v3.4/main]
OK: 13194 distinct packages available
(1/6) Installing libmnl (1.0.4-r0)
(2/6) Installing libnftnl-libs (1.0.7-r0)
(3/6) Installing iptables (1.6.0-r0)
(4/6) Installing libcrypto1.0 (1.0.2k-r0)
(5/6) Installing libssl1.0 (1.0.2k-r0)
(6/6) Installing openvswitch (2.5.0-r0)
Executing busybox-1.25.1-r0.trigger
OK: 19 MiB in 17 packages
 ---&amp;gt; b130141ad660
Removing intermediate container 2ae2fbee6834
Step 4/5 : COPY netplugin netmaster netctl startcontiv.sh /
 ---&amp;gt; 2b88b2f8e5e7
Removing intermediate container d7580a394c64
Step 5/5 : ENTRYPOINT /startcontiv.sh
 ---&amp;gt; Running in e6fc5c887cb3
 ---&amp;gt; 1c569e4c633d
Removing intermediate container e6fc5c887cb3
Successfully built 1c569e4c633d
Password:
03d60dc01488362156f98a062d17af7a34e4b17569c2fe4f5d2048d619860314
Untagged: contivrootfs:latest
Deleted: sha256:1c569e4c633d27bd3e79d9d30b2825ce57452d30f90a3452304b932835331b13
Deleted: sha256:2b88b2f8e5e7bae348bf296f6254662c1d444760db5acd1764b9c955b106adad
Deleted: sha256:b60594671dc9312bf7ba73bf17abb9704d2b0d0e802c0d990315c5b4a5ca11fe
Deleted: sha256:b130141ad660d4ee291d9eb9a1e0704c4bc009fc91a73de28e8fd110aa45c481
Deleted: sha256:ab3c02d5a171681ba00d27f2c456cf8b63eeeaf408161dc84d9d89526d0399de
Deleted: sha256:f0440792dff6a89e321cc5d34ecaa21b4cb993f0c4e4df6c2b04eef8878bb471
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;创建镜像这一步需要输入你的docker hub密码。而且alpine下载软件需要翻墙的。打包v2plugin目录需要使用sudo，不然会报一个错。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;整个插件打包压缩后的大小是91M。现在&lt;code&gt;rootfs&lt;/code&gt;和&lt;code&gt;config.json&lt;/code&gt;都已经有了，就可以在你自己的系统上create docker plugin了。&lt;/p&gt;

&lt;h2 id=&#34;启动contiv-plugin&#34;&gt;启动contiv plugin&lt;/h2&gt;

&lt;p&gt;创建docker network plugin并enable。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;$docker plugin create contiv/v2plugin .
contiv/v2plugin
$docker plugin enable contiv/v2plugin
$docker plugin ls
ID                  NAME                     DESCRIPTION                        ENABLED
574d4a4d82a3        contiv/v2plugin:latest   Contiv network plugin for Docker   true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此*contiv plugin*已经创建好了，enable后执行&lt;code&gt;ip addr&lt;/code&gt;命令可以看到多出一个网络*contivh0*。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;contivh0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UNKNOWN qlen 1000
link/ether 02:02:ac:13:ff:fe brd ff:ff:ff:ff:ff:ff
inet 172.19.255.254/16 scope global contivh0
	valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;且主机多了一个IP地址*172.19.255.254*。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;不需要再主机上安装&lt;code&gt;netctl&lt;/code&gt;、&lt;code&gt;netmaster&lt;/code&gt;、&lt;code&gt;netplugin&lt;/code&gt;这几个二进制文件了，只需要安装&lt;code&gt;docker plugin&lt;/code&gt;即可，这些都已经封装到plugin中了，如果你看下插件的目录结构就知道了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因为插件安装的问题，目前我测试机上的自定义插件都无法使用，正在troubleshooting中，一旦有进展会及时更新该文档。&lt;/p&gt;

&lt;p&gt;另外正在同步跟开发者沟通中，因为时差问题，下周一才能有结果。😪&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>思科开源docker网络插件Contiv简介</title>
      <link>https://jimmysong.io/blog/contiv-guide/</link>
      <pubDate>Thu, 09 Mar 2017 11:28:34 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/contiv-guide/</guid>
      <description>
        
        
        

&lt;p&gt;&lt;strong&gt;Contiv&lt;/strong&gt;是思科开发的docker网络插件，从2015年就开源了，业界通常拿它和Calico比较。貌似Contiv以前还开发过volume plugin，现在销声匿迹了，只有netplugin仍在活跃开发。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dockone.io/article/1935&#34;&gt;容器网络插件 Calico 与 Contiv Netplugin深入比较&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;还有篇文章讲解了&lt;a href=&#34;http://blog.dataman-inc.com/shurenyun-docker-133/&#34;&gt;docker网络方案的改进&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;contiv-netplugin-简介&#34;&gt;Contiv Netplugin 简介&lt;/h3&gt;

&lt;p&gt;Contiv Netplugin 是来自思科的解决方案。编程语言为 Go。它基于 OpenvSwitch，以插件化的形式支持容器访问网络，支持 VLAN，Vxlan，多租户，主机访问控制策略等。作为思科整体支持容器基础设施contiv项目的网络部分，最大的亮点在于容器被赋予了 SDN 能力，实现对容器更细粒度，更丰富的访问控制功能。另外，对 Docker CNM 网络模型的支持，并内置了 IPAM 接口，不仅仅提供了一容器一 IP，而且容器的网络信息被记录的容器配置中，伴随着容器的整个生命周期，减低因为状态不同步造成网络信息丢失的风险。有别于 CNI，这种内聚化的设计有利于减少对第三方模块的依赖。随着项目的发展，除了 Docker，还提供了对 Kubernetes 以及 Mesos 的支持，即 CNI 接口。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/jimmysong/image/upload/images/netplugin-arch.png&#34; alt=&#34;netplugin 架构&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Netmaster 后台进程负责记录所有节点状态，保存网络信息，分配 IP 地址&lt;/li&gt;
&lt;li&gt;Netplugin 后台进程作为每个宿主机上的 Agent 与 Docker 及 OVS 通信，处理来自 Docker 的请求，管理 OVS。Docker 方面接口为 remote driver，包括一系列 Docker 定义的 JSON-RPC(POST) 消息。OVS 方面接口为 remote ovsdb，也是 JSON-RPC 消息。以上消息都在 localhost 上处理。&lt;/li&gt;
&lt;li&gt;集群管理依赖 etcd/serf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://res.cloudinary.com/jimmysong/image/upload/images/netplugin-code-structure.png&#34; alt=&#34;netplugin 代码结构&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;netplugin的优势&#34;&gt;Netplugin的优势&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;较早支持CNM模型。与已有的网络基础设施兼容性较高，改造影响小。基于VLAN的平行扩展与现有网络结构地位对等&lt;/li&gt;
&lt;li&gt;SDN能力，能够对容器的网络访问做更精细的控制&lt;/li&gt;
&lt;li&gt;多租户支持，具备未来向混合云/公有云迁移的潜力&lt;/li&gt;
&lt;li&gt;代码规模不大，逻辑结构清晰，并发好，VLAN在公司内部有开发部署运维实践经验，稳定性经过生产环境验证&lt;/li&gt;
&lt;li&gt;&lt;u&gt;&lt;strong&gt;京东&lt;/strong&gt;基于相同的技术栈（OVS + VLAN）已支持10w+ 容器的运行。&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;next&#34;&gt;Next&lt;/h3&gt;

&lt;p&gt;后续文章会讲解contiv netplugin的环境配置和开发。目前还在1.0-beta版本。&lt;strong&gt;Docker store&lt;/strong&gt;上提供了contiv插件的&lt;a href=&#34;https://store.docker.com/plugins/803eecee-0780-401a-a454-e9523ccf86b3&#34;&gt;下载地址&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>

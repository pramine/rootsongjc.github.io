<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Song - Cloud Native | Open Source | Community – helm</title>
    <link>https://jimmysong.io/tags/helm/</link>
    <description>Recent content in helm on Jimmy Song - Cloud Native | Open Source | Community</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright &amp;copy; 2020 Jimmy Song 保留所有权利；基于 Hugo [educenter](https://github.com/themefisher/educenter-hugo)  主题构建</copyright>
    <lastBuildDate>Fri, 27 Oct 2017 19:10:59 +0800</lastBuildDate>
    
	  <atom:link href="https://jimmysong.io/tags/helm/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>使用Helm安装Nginx ingress</title>
      <link>https://jimmysong.io/blog/install-nginx-ingress-with-helm/</link>
      <pubDate>Fri, 27 Oct 2017 19:10:59 +0800</pubDate>
      
      <guid>https://jimmysong.io/blog/install-nginx-ingress-with-helm/</guid>
      <description>
        
        
        

&lt;h1 id=&#34;使用helm安装nginx-ingress&#34;&gt;使用Helm安装Nginx ingress&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/ingress-nginx&#34;&gt;Nginx ingress&lt;/a&gt; 使用ConfigMap来管理Nginx配置，nginx是大家熟知的代理和负载均衡软件，比起&lt;a href=&#34;https://traefik.io&#34;&gt;Traefik&lt;/a&gt;来说功能更加强大，我们使用&lt;a href=&#34;http://helm.sh&#34;&gt;helm&lt;/a&gt;来部署，&lt;a href=&#34;https://github.com/kubernetes/charts&#34;&gt;chart&lt;/a&gt;保存在私有的仓库中，helm安装使用见&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/practice/helm.html&#34;&gt;使用Helm管理kubernetes应用&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;安装时需要用到的镜像有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sophos/nginx-vts-exporter:v0.6&lt;/li&gt;
&lt;li&gt;gcr.io/google_containers/nginx-ingress-controller:0.9.0-beta.15&lt;/li&gt;
&lt;li&gt;gcr.io/google_containers/defaultbackend:1.3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;gcr.io中的那个两个镜像我复制了一份到时速云，可供大家下载：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;index.tenxcloud.com/jimmy/defaultbackend:1.3&lt;/li&gt;
&lt;li&gt;index.tenxcloud.com/jimmy/nginx-ingress-controller:0.9.0-beta.15&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Docker hub上的那个镜像可以直接下载，所有的安装时需要的配置保存在&lt;a href=&#34;https://github.com/rootsongjc/kubernetes-handbook/blob/master/manifests/nginx-ingress&#34;&gt;../manifests/nginx-ingress&lt;/a&gt;目录下。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;安装nginx-ingress chart到本地repo中&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;修改&lt;code&gt;values.yaml&lt;/code&gt;配置，启用RBAC支持，相关配置见&lt;a href=&#34;https://github.com/kubernetes/charts/tree/master/stable/nginx-ingress#configuration&#34;&gt;nginx-ingress chart&lt;/a&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;helm package .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;查看niginx-ingress&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ helm search nginx-ingress
NAME                	VERSION	DESCRIPTION
local/nginx-ingress 	0.8.9  	An nginx Ingress controller that uses ConfigMap...
stable/nginx-ingress	0.8.9  	An nginx Ingress controller that uses ConfigMap...
stable/nginx-lego   	0.3.0  	Chart for nginx-ingress-controller and kube-lego
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;使用helm部署nginx-ingress&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ helm install --name nginx-ingress local/nginx-ingress
NAME:   nginx-ingress
LAST DEPLOYED: Fri Oct 27 18:26:58 2017
NAMESPACE: default
STATUS: DEPLOYED

RESOURCES:
==&amp;gt; rbac.authorization.k8s.io/v1beta1/Role
NAME                         KIND
nginx-ingress-nginx-ingress  Role.v1beta1.rbac.authorization.k8s.io

==&amp;gt; rbac.authorization.k8s.io/v1beta1/RoleBinding
nginx-ingress-nginx-ingress  RoleBinding.v1beta1.rbac.authorization.k8s.io

==&amp;gt; v1/Service
NAME                                         CLUSTER-IP      EXTERNAL-IP  PORT(S)                     AGE
nginx-ingress-nginx-ingress-controller       10.254.100.108  &amp;lt;nodes&amp;gt;      80:30484/TCP,443:31053/TCP  1s
nginx-ingress-nginx-ingress-default-backend  10.254.58.156   &amp;lt;none&amp;gt;       80/TCP                      1s

==&amp;gt; extensions/v1beta1/Deployment
NAME                                         DESIRED  CURRENT  UP-TO-DATE  AVAILABLE  AGE
nginx-ingress-nginx-ingress-default-backend  1        1        1           0          1s
nginx-ingress-nginx-ingress-controller       1        1        1           0          1s

==&amp;gt; v1/ConfigMap
NAME                                    DATA  AGE
nginx-ingress-nginx-ingress-controller  1     1s

==&amp;gt; v1/ServiceAccount
NAME                         SECRETS  AGE
nginx-ingress-nginx-ingress  1        1s

==&amp;gt; rbac.authorization.k8s.io/v1beta1/ClusterRole
NAME                         KIND
nginx-ingress-nginx-ingress  ClusterRole.v1beta1.rbac.authorization.k8s.io

==&amp;gt; rbac.authorization.k8s.io/v1beta1/ClusterRoleBinding
nginx-ingress-nginx-ingress  ClusterRoleBinding.v1beta1.rbac.authorization.k8s.io


NOTES:
The nginx-ingress controller has been installed.
Get the application URL by running these commands:
  export HTTP_NODE_PORT=$(kubectl --namespace default get services -o jsonpath=&amp;quot;{.spec.ports[0].nodePort}&amp;quot; nginx-ingress-nginx-ingress-controller)
  export HTTPS_NODE_PORT=$(kubectl --namespace default get services -o jsonpath=&amp;quot;{.spec.ports[1].nodePort}&amp;quot; nginx-ingress-nginx-ingress-controller)
  export NODE_IP=$(kubectl --namespace default get nodes -o jsonpath=&amp;quot;{.items[0].status.addresses[1].address}&amp;quot;)

  echo &amp;quot;Visit http://$NODE_IP:$HTTP_NODE_PORT to access your application via HTTP.&amp;quot;
  echo &amp;quot;Visit https://$NODE_IP:$HTTPS_NODE_PORT to access your application via HTTPS.&amp;quot;

An example Ingress that makes use of the controller:

  apiVersion: extensions/v1beta1
  kind: Ingress
  metadata:
    annotations:
      kubernetes.io/ingress.class: nginx
    name: example
    namespace: foo
  spec:
    rules:
      - host: www.example.com
        http:
          paths:
            - backend:
                serviceName: exampleService
                servicePort: 80
              path: /
    # This section is only required if TLS is to be enabled for the Ingress
    tls:
        - hosts:
            - www.example.com
          secretName: example-tls

If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: foo
  data:
    tls.crt: &amp;lt;base64 encoded cert&amp;gt;
    tls.key: &amp;lt;base64 encoded key&amp;gt;
  type: kubernetes.io/tls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;访问Nginx&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先获取Nginx的地址，从我们使用helm安装nginx-ingress命令的输出中那个可以看到提示，根据提示执行可以看到nginx的http和https地址：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  export HTTP_NODE_PORT=$(kubectl --namespace default get services -o jsonpath=&amp;quot;{.spec.ports[0].nodePort}&amp;quot; nginx-ingress-nginx-ingress-controller)
  export HTTPS_NODE_PORT=$(kubectl --namespace default get services -o jsonpath=&amp;quot;{.spec.ports[1].nodePort}&amp;quot; nginx-ingress-nginx-ingress-controller)
  export NODE_IP=$(kubectl --namespace default get nodes -o jsonpath=&amp;quot;{.items[0].status.addresses[1].address}&amp;quot;)

  echo &amp;quot;Visit http://$NODE_IP:$HTTP_NODE_PORT to access your application via HTTP.&amp;quot;
  echo &amp;quot;Visit https://$NODE_IP:$HTTPS_NODE_PORT to access your application via HTTPS.&amp;quot;
  Visit http://172.20.0.113:30484 to access your application via HTTP.
  Visit https://172.20.0.113:31053 to access your application via HTTPS.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;http地址：&lt;a href=&#34;http://172.20.0.113:30484&#34;&gt;http://172.20.0.113:30484&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https地址：&lt;a href=&#34;https://172.20.0.113:31053&#34;&gt;https://172.20.0.113:31053&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们分别在http和https地址上测试一下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/healthz&lt;/code&gt;返回200&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt;返回404错误&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -v http://172.20.0.113:30484/healthz
# 返回200
curl -v http://172.20.0.113:30484/
# 返回404
curl -v --insecure http://172.20.0.113:30484/healthz
# 返回200
curl -v --insecure http://172.20.0.113:30484/
# 返回404
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;删除nginx-ingress&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;helm delete --purge nginx-ingress
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&lt;code&gt;--purge&lt;/code&gt;参数可以彻底删除release不留下记录，否则下一次部署的时候不能使用重名的release。&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/ingress-nginx&#34;&gt;Ingress-nginx github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/charts/tree/master/stable/nginx-ingress&#34;&gt;Nginx chart configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/kubernetes-handbook/practice/helm.html&#34;&gt;使用Helm管理kubernetes应用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
